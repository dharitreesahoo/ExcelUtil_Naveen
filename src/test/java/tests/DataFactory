package framework.utility.common;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

//import com.comviva.framework.DesEncryptor;

/**
 * Created by rahul.rana on 5/5/2017.
 */
public class DataFactory {


    /**
     * Load Domain cAtegory
     *
     * @throws IOException
     * @throws InvalidFormatException
     */
   /* public static void loadDomainCategoryDBMap() {
        try {
            MobiquityGUIQueries dbConn = new MobiquityGUIQueries();
            HashMap<String, DomainCategoryDB> categoryDomainMapDataList = new HashMap<>();

            // Get the Category and Domain details From DB
            System.out.print("Fetching Domain Category Mapping from DataBase...\n");

            ResultSet result = dbConn.dbFetchDomainCategoryMap();
            while (result.next()) {
                String CategoryName = result.getString("CATEGORY_NAME");
                String CategoryCode = result.getString("CATEGORY_CODE");
                String DomainName = result.getString("DOMAIN_NAME");
                String DomainCode = result.getString("DOMAIN_CODE");
                String ParentCategoryCode = result.getString("PARENT_CATEGORY_CODE");

                DomainCategoryDB objDomainCategory = new DomainCategoryDB(CategoryName,
                        CategoryCode,
                        DomainName,
                        DomainCode,
                        ParentCategoryCode);

                if (DomainCode.equals("OPT")) {
                    objDomainCategory.setDomainAsOperator();
                } else if (DomainCode.equals("SUBS")) {
                    objDomainCategory.setDomainAsLeaf();
                } else if (DomainCode.equals("Enterprise") || DomainCode.equals("INTLMER")) {
                    objDomainCategory.setDomainAsSpecial();
                } else {
                    objDomainCategory.setIsChannelDomain();
                }

                categoryDomainMapDataList.put(CategoryCode, objDomainCategory);
            }
            GlobalData.domainCategoryMap = categoryDomainMapDataList;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String getCategoryName(String categoryCode) {
        DomainCategoryDB map = GlobalData.domainCategoryMap.get(categoryCode);
        return map.CategoryName;
    }

    public static String getDomainName(String categoryCode) {
        DomainCategoryDB map = GlobalData.domainCategoryMap.get(categoryCode);
        return map.DomainName;
    }

    public static String getDomainCode(String categoryCode) {
        DomainCategoryDB map = GlobalData.domainCategoryMap.get(categoryCode);
        return map.DomainCode;
    }

    public static String getParentCategoryCode(String categoryCode) {
        DomainCategoryDB map = GlobalData.domainCategoryMap.get(categoryCode);
        return map.ParentCategoryCode;
    }

    public static boolean isLeafDomain(String categoryCode){
        DomainCategoryDB map = GlobalData.domainCategoryMap.get(categoryCode);
        return map.isLeafDomain;
    }*/


    /***********************************************************************************
     * HELP METHODS
     */

    public static String getRandomNumberAsString(int length) {
        return "" + getRandomNumber(length);
    }

    /**
     * Generate Random Number
     * TODO - move to generic File
     * TODO - move to generic File
     *
     * @param length
     * @return
     */
    public static int getRandomNumber(int length) {
        Random r = new Random(System.currentTimeMillis());
        switch (length) {
            case 3: {
                return r.nextInt(999 - 100 + 1) + 100;
            }
            case 4: {
                return r.nextInt(9999 - 1000 + 1) + 1000;
            }
            case 5: {
                return r.nextInt(99999 - 10000 + 1) + 10000;
            }
            case 6: {
                return r.nextInt(999999 - 100000 + 1) + 100000;
            }
            case 7: {
                return r.nextInt(9999999 - 1000000 + 1) + 1000000;
            }
            case 8: {
                return r.nextInt(99999999 - 10000000 + 1) + 10000000;
            }
            case 9: {
                return r.nextInt(999999999 - 100000000 + 1) + 100000000;
            }
        }
        return length;
    }

    public static String getRandomString(int length) {
        char[] chars = "abcdefghijklmnopqrstuvwxyzhahaha".toCharArray();
        StringBuilder sb = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            char c = chars[random.nextInt(chars.length)];
            sb.append(c);
        }
        return sb.toString();
    }

    /**
     * Get Time Stamp
     *
     * @return
     */
    public static String getTimeStamp() {
        return new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss").format(new Date());
    }
    
    public static void main(String[] args) {
    	String str = getRandomString(76);
    	System.out.println(str);
    	String time = getTimeStamp();
    	System.out.println(time);
	}


}
